#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HealthCareModel.Object_Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HealthDB")]
	public partial class HealthModelsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAlarmAttendance(AlarmAttendance instance);
    partial void UpdateAlarmAttendance(AlarmAttendance instance);
    partial void DeleteAlarmAttendance(AlarmAttendance instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertAlarmCount(AlarmCount instance);
    partial void UpdateAlarmCount(AlarmCount instance);
    partial void DeleteAlarmCount(AlarmCount instance);
    partial void InsertAlarm(Alarm instance);
    partial void UpdateAlarm(Alarm instance);
    partial void DeleteAlarm(Alarm instance);
    partial void InsertAssignedTask(AssignedTask instance);
    partial void UpdateAssignedTask(AssignedTask instance);
    partial void DeleteAssignedTask(AssignedTask instance);
    partial void InsertSubTask(SubTask instance);
    partial void UpdateSubTask(SubTask instance);
    partial void DeleteSubTask(SubTask instance);
    partial void InsertTask(Task instance);
    partial void UpdateTask(Task instance);
    partial void DeleteTask(Task instance);
    partial void InsertAlarmPublisher(AlarmPublisher instance);
    partial void UpdateAlarmPublisher(AlarmPublisher instance);
    partial void DeleteAlarmPublisher(AlarmPublisher instance);
    partial void InsertPublishedAlarm(PublishedAlarm instance);
    partial void UpdatePublishedAlarm(PublishedAlarm instance);
    partial void DeletePublishedAlarm(PublishedAlarm instance);
    #endregion
		
		public HealthModelsDataContext() : 
				base(global::HealthCareModel.Properties.Settings.Default.HealthDBConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public HealthModelsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HealthModelsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HealthModelsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HealthModelsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AlarmAttendance> AlarmAttendances
		{
			get
			{
				return this.GetTable<AlarmAttendance>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<AlarmCount> AlarmCounts
		{
			get
			{
				return this.GetTable<AlarmCount>();
			}
		}
		
		public System.Data.Linq.Table<Alarm> Alarms
		{
			get
			{
				return this.GetTable<Alarm>();
			}
		}
		
		public System.Data.Linq.Table<AssignedTask> AssignedTasks
		{
			get
			{
				return this.GetTable<AssignedTask>();
			}
		}
		
		public System.Data.Linq.Table<SubTask> SubTasks
		{
			get
			{
				return this.GetTable<SubTask>();
			}
		}
		
		public System.Data.Linq.Table<Task> Tasks
		{
			get
			{
				return this.GetTable<Task>();
			}
		}
		
		public System.Data.Linq.Table<AlarmPublisher> AlarmPublishers
		{
			get
			{
				return this.GetTable<AlarmPublisher>();
			}
		}
		
		public System.Data.Linq.Table<PublishedAlarm> PublishedAlarms
		{
			get
			{
				return this.GetTable<PublishedAlarm>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AlarmAttendance")]
	public partial class AlarmAttendance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _alarmId;
		
		private int _userId;
		
		private EntityRef<User> _User;
		
		private EntityRef<Alarm> _Alarm;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnalarmIdChanging(int value);
    partial void OnalarmIdChanged();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    #endregion
		
		public AlarmAttendance()
		{
			this._User = default(EntityRef<User>);
			this._Alarm = default(EntityRef<Alarm>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_alarmId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int alarmId
		{
			get
			{
				return this._alarmId;
			}
			set
			{
				if ((this._alarmId != value))
				{
					if (this._Alarm.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnalarmIdChanging(value);
					this.SendPropertyChanging();
					this._alarmId = value;
					this.SendPropertyChanged("alarmId");
					this.OnalarmIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_AlarmAttendance", Storage="_User", ThisKey="userId", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.AlarmAttendances.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.AlarmAttendances.Add(this);
						this._userId = value.id;
					}
					else
					{
						this._userId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Alarm_AlarmAttendance", Storage="_Alarm", ThisKey="alarmId", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Alarm Alarm
		{
			get
			{
				return this._Alarm.Entity;
			}
			set
			{
				Alarm previousValue = this._Alarm.Entity;
				if (((previousValue != value) 
							|| (this._Alarm.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Alarm.Entity = null;
						previousValue.AlarmAttendances.Remove(this);
					}
					this._Alarm.Entity = value;
					if ((value != null))
					{
						value.AlarmAttendances.Add(this);
						this._alarmId = value.id;
					}
					else
					{
						this._alarmId = default(int);
					}
					this.SendPropertyChanged("Alarm");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _firstName;
		
		private string _lastName;
		
		private string _userName;
		
		private string _password;
		
		private string _role;
		
		private EntitySet<AlarmAttendance> _AlarmAttendances;
		
		private EntitySet<AssignedTask> _AssignedTasks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnfirstNameChanging(string value);
    partial void OnfirstNameChanged();
    partial void OnlastNameChanging(string value);
    partial void OnlastNameChanged();
    partial void OnuserNameChanging(string value);
    partial void OnuserNameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnroleChanging(string value);
    partial void OnroleChanged();
    #endregion
		
		public User()
		{
			this._AlarmAttendances = new EntitySet<AlarmAttendance>(new Action<AlarmAttendance>(this.attach_AlarmAttendances), new Action<AlarmAttendance>(this.detach_AlarmAttendances));
			this._AssignedTasks = new EntitySet<AssignedTask>(new Action<AssignedTask>(this.attach_AssignedTasks), new Action<AssignedTask>(this.detach_AssignedTasks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_firstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string firstName
		{
			get
			{
				return this._firstName;
			}
			set
			{
				if ((this._firstName != value))
				{
					this.OnfirstNameChanging(value);
					this.SendPropertyChanging();
					this._firstName = value;
					this.SendPropertyChanged("firstName");
					this.OnfirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string lastName
		{
			get
			{
				return this._lastName;
			}
			set
			{
				if ((this._lastName != value))
				{
					this.OnlastNameChanging(value);
					this.SendPropertyChanging();
					this._lastName = value;
					this.SendPropertyChanged("lastName");
					this.OnlastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string userName
		{
			get
			{
				return this._userName;
			}
			set
			{
				if ((this._userName != value))
				{
					this.OnuserNameChanging(value);
					this.SendPropertyChanging();
					this._userName = value;
					this.SendPropertyChanged("userName");
					this.OnuserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_role", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string role
		{
			get
			{
				return this._role;
			}
			set
			{
				if ((this._role != value))
				{
					this.OnroleChanging(value);
					this.SendPropertyChanging();
					this._role = value;
					this.SendPropertyChanged("role");
					this.OnroleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_AlarmAttendance", Storage="_AlarmAttendances", ThisKey="id", OtherKey="userId")]
		public EntitySet<AlarmAttendance> AlarmAttendances
		{
			get
			{
				return this._AlarmAttendances;
			}
			set
			{
				this._AlarmAttendances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_AssignedTask", Storage="_AssignedTasks", ThisKey="id", OtherKey="userId")]
		public EntitySet<AssignedTask> AssignedTasks
		{
			get
			{
				return this._AssignedTasks;
			}
			set
			{
				this._AssignedTasks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AlarmAttendances(AlarmAttendance entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_AlarmAttendances(AlarmAttendance entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_AssignedTasks(AssignedTask entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_AssignedTasks(AssignedTask entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AlarmCount")]
	public partial class AlarmCount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _alarmId;
		
		private int _count;
		
		private EntityRef<Alarm> _Alarm;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnalarmIdChanging(int value);
    partial void OnalarmIdChanged();
    partial void OncountChanging(int value);
    partial void OncountChanged();
    #endregion
		
		public AlarmCount()
		{
			this._Alarm = default(EntityRef<Alarm>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_alarmId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int alarmId
		{
			get
			{
				return this._alarmId;
			}
			set
			{
				if ((this._alarmId != value))
				{
					if (this._Alarm.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnalarmIdChanging(value);
					this.SendPropertyChanging();
					this._alarmId = value;
					this.SendPropertyChanged("alarmId");
					this.OnalarmIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_count", DbType="Int NOT NULL")]
		public int count
		{
			get
			{
				return this._count;
			}
			set
			{
				if ((this._count != value))
				{
					this.OncountChanging(value);
					this.SendPropertyChanging();
					this._count = value;
					this.SendPropertyChanged("count");
					this.OncountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Alarm_AlarmCount", Storage="_Alarm", ThisKey="alarmId", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Alarm Alarm
		{
			get
			{
				return this._Alarm.Entity;
			}
			set
			{
				Alarm previousValue = this._Alarm.Entity;
				if (((previousValue != value) 
							|| (this._Alarm.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Alarm.Entity = null;
						previousValue.AlarmCount = null;
					}
					this._Alarm.Entity = value;
					if ((value != null))
					{
						value.AlarmCount = this;
						this._alarmId = value.id;
					}
					else
					{
						this._alarmId = default(int);
					}
					this.SendPropertyChanged("Alarm");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Alarms")]
	public partial class Alarm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _type;
		
		private System.DateTime _time;
		
		private string _location;
		
		private string _status;
		
		private EntitySet<AlarmAttendance> _AlarmAttendances;
		
		private EntityRef<AlarmCount> _AlarmCount;
		
		private EntitySet<PublishedAlarm> _PublishedAlarms;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void OntimeChanging(System.DateTime value);
    partial void OntimeChanged();
    partial void OnlocationChanging(string value);
    partial void OnlocationChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    #endregion
		
		public Alarm()
		{
			this._AlarmAttendances = new EntitySet<AlarmAttendance>(new Action<AlarmAttendance>(this.attach_AlarmAttendances), new Action<AlarmAttendance>(this.detach_AlarmAttendances));
			this._AlarmCount = default(EntityRef<AlarmCount>);
			this._PublishedAlarms = new EntitySet<PublishedAlarm>(new Action<PublishedAlarm>(this.attach_PublishedAlarms), new Action<PublishedAlarm>(this.detach_PublishedAlarms));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_time", DbType="DateTime NOT NULL")]
		public System.DateTime time
		{
			get
			{
				return this._time;
			}
			set
			{
				if ((this._time != value))
				{
					this.OntimeChanging(value);
					this.SendPropertyChanging();
					this._time = value;
					this.SendPropertyChanged("time");
					this.OntimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_location", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string location
		{
			get
			{
				return this._location;
			}
			set
			{
				if ((this._location != value))
				{
					this.OnlocationChanging(value);
					this.SendPropertyChanging();
					this._location = value;
					this.SendPropertyChanged("location");
					this.OnlocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Alarm_AlarmAttendance", Storage="_AlarmAttendances", ThisKey="id", OtherKey="alarmId")]
		public EntitySet<AlarmAttendance> AlarmAttendances
		{
			get
			{
				return this._AlarmAttendances;
			}
			set
			{
				this._AlarmAttendances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Alarm_AlarmCount", Storage="_AlarmCount", ThisKey="id", OtherKey="alarmId", IsUnique=true, IsForeignKey=false)]
		public AlarmCount AlarmCount
		{
			get
			{
				return this._AlarmCount.Entity;
			}
			set
			{
				AlarmCount previousValue = this._AlarmCount.Entity;
				if (((previousValue != value) 
							|| (this._AlarmCount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AlarmCount.Entity = null;
						previousValue.Alarm = null;
					}
					this._AlarmCount.Entity = value;
					if ((value != null))
					{
						value.Alarm = this;
					}
					this.SendPropertyChanged("AlarmCount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Alarm_PublishedAlarm", Storage="_PublishedAlarms", ThisKey="id", OtherKey="alarmId")]
		public EntitySet<PublishedAlarm> PublishedAlarms
		{
			get
			{
				return this._PublishedAlarms;
			}
			set
			{
				this._PublishedAlarms.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AlarmAttendances(AlarmAttendance entity)
		{
			this.SendPropertyChanging();
			entity.Alarm = this;
		}
		
		private void detach_AlarmAttendances(AlarmAttendance entity)
		{
			this.SendPropertyChanging();
			entity.Alarm = null;
		}
		
		private void attach_PublishedAlarms(PublishedAlarm entity)
		{
			this.SendPropertyChanging();
			entity.Alarm = this;
		}
		
		private void detach_PublishedAlarms(PublishedAlarm entity)
		{
			this.SendPropertyChanging();
			entity.Alarm = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AssignedTasks")]
	public partial class AssignedTask : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _taskId;
		
		private int _userId;
		
		private EntityRef<User> _User;
		
		private EntityRef<Task> _Task;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntaskIdChanging(int value);
    partial void OntaskIdChanged();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    #endregion
		
		public AssignedTask()
		{
			this._User = default(EntityRef<User>);
			this._Task = default(EntityRef<Task>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_taskId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int taskId
		{
			get
			{
				return this._taskId;
			}
			set
			{
				if ((this._taskId != value))
				{
					if (this._Task.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntaskIdChanging(value);
					this.SendPropertyChanging();
					this._taskId = value;
					this.SendPropertyChanged("taskId");
					this.OntaskIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_AssignedTask", Storage="_User", ThisKey="userId", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.AssignedTasks.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.AssignedTasks.Add(this);
						this._userId = value.id;
					}
					else
					{
						this._userId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_AssignedTask", Storage="_Task", ThisKey="taskId", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Task Task
		{
			get
			{
				return this._Task.Entity;
			}
			set
			{
				Task previousValue = this._Task.Entity;
				if (((previousValue != value) 
							|| (this._Task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task.Entity = null;
						previousValue.AssignedTasks.Remove(this);
					}
					this._Task.Entity = value;
					if ((value != null))
					{
						value.AssignedTasks.Add(this);
						this._taskId = value.id;
					}
					else
					{
						this._taskId = default(int);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubTasks")]
	public partial class SubTask : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _taskId;
		
		private string _description;
		
		private string _status;
		
		private EntityRef<Task> _Task;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OntaskIdChanging(int value);
    partial void OntaskIdChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    #endregion
		
		public SubTask()
		{
			this._Task = default(EntityRef<Task>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_taskId", DbType="Int NOT NULL")]
		public int taskId
		{
			get
			{
				return this._taskId;
			}
			set
			{
				if ((this._taskId != value))
				{
					if (this._Task.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntaskIdChanging(value);
					this.SendPropertyChanging();
					this._taskId = value;
					this.SendPropertyChanged("taskId");
					this.OntaskIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_SubTask", Storage="_Task", ThisKey="taskId", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Task Task
		{
			get
			{
				return this._Task.Entity;
			}
			set
			{
				Task previousValue = this._Task.Entity;
				if (((previousValue != value) 
							|| (this._Task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task.Entity = null;
						previousValue.SubTasks.Remove(this);
					}
					this._Task.Entity = value;
					if ((value != null))
					{
						value.SubTasks.Add(this);
						this._taskId = value.id;
					}
					else
					{
						this._taskId = default(int);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tasks")]
	public partial class Task : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _taskName;
		
		private string _description;
		
		private string _status;
		
		private EntitySet<AssignedTask> _AssignedTasks;
		
		private EntitySet<SubTask> _SubTasks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OntaskNameChanging(string value);
    partial void OntaskNameChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    #endregion
		
		public Task()
		{
			this._AssignedTasks = new EntitySet<AssignedTask>(new Action<AssignedTask>(this.attach_AssignedTasks), new Action<AssignedTask>(this.detach_AssignedTasks));
			this._SubTasks = new EntitySet<SubTask>(new Action<SubTask>(this.attach_SubTasks), new Action<SubTask>(this.detach_SubTasks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_taskName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string taskName
		{
			get
			{
				return this._taskName;
			}
			set
			{
				if ((this._taskName != value))
				{
					this.OntaskNameChanging(value);
					this.SendPropertyChanging();
					this._taskName = value;
					this.SendPropertyChanged("taskName");
					this.OntaskNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_AssignedTask", Storage="_AssignedTasks", ThisKey="id", OtherKey="taskId")]
		public EntitySet<AssignedTask> AssignedTasks
		{
			get
			{
				return this._AssignedTasks;
			}
			set
			{
				this._AssignedTasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_SubTask", Storage="_SubTasks", ThisKey="id", OtherKey="taskId")]
		public EntitySet<SubTask> SubTasks
		{
			get
			{
				return this._SubTasks;
			}
			set
			{
				this._SubTasks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AssignedTasks(AssignedTask entity)
		{
			this.SendPropertyChanging();
			entity.Task = this;
		}
		
		private void detach_AssignedTasks(AssignedTask entity)
		{
			this.SendPropertyChanging();
			entity.Task = null;
		}
		
		private void attach_SubTasks(SubTask entity)
		{
			this.SendPropertyChanging();
			entity.Task = this;
		}
		
		private void detach_SubTasks(SubTask entity)
		{
			this.SendPropertyChanging();
			entity.Task = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AlarmPublishers")]
	public partial class AlarmPublisher : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _pacient_name;
		
		private string _condition;
		
		private string _location;
		
		private string _password;
		
		private EntitySet<PublishedAlarm> _PublishedAlarms;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onpacient_nameChanging(string value);
    partial void Onpacient_nameChanged();
    partial void OnconditionChanging(string value);
    partial void OnconditionChanged();
    partial void OnlocationChanging(string value);
    partial void OnlocationChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    #endregion
		
		public AlarmPublisher()
		{
			this._PublishedAlarms = new EntitySet<PublishedAlarm>(new Action<PublishedAlarm>(this.attach_PublishedAlarms), new Action<PublishedAlarm>(this.detach_PublishedAlarms));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pacient_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string pacient_name
		{
			get
			{
				return this._pacient_name;
			}
			set
			{
				if ((this._pacient_name != value))
				{
					this.Onpacient_nameChanging(value);
					this.SendPropertyChanging();
					this._pacient_name = value;
					this.SendPropertyChanged("pacient_name");
					this.Onpacient_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_condition", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string condition
		{
			get
			{
				return this._condition;
			}
			set
			{
				if ((this._condition != value))
				{
					this.OnconditionChanging(value);
					this.SendPropertyChanging();
					this._condition = value;
					this.SendPropertyChanged("condition");
					this.OnconditionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_location", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string location
		{
			get
			{
				return this._location;
			}
			set
			{
				if ((this._location != value))
				{
					this.OnlocationChanging(value);
					this.SendPropertyChanging();
					this._location = value;
					this.SendPropertyChanged("location");
					this.OnlocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AlarmPublisher_PublishedAlarm", Storage="_PublishedAlarms", ThisKey="id", OtherKey="publisherId")]
		public EntitySet<PublishedAlarm> PublishedAlarms
		{
			get
			{
				return this._PublishedAlarms;
			}
			set
			{
				this._PublishedAlarms.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PublishedAlarms(PublishedAlarm entity)
		{
			this.SendPropertyChanging();
			entity.AlarmPublisher = this;
		}
		
		private void detach_PublishedAlarms(PublishedAlarm entity)
		{
			this.SendPropertyChanging();
			entity.AlarmPublisher = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PublishedAlarms")]
	public partial class PublishedAlarm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _alarmId;
		
		private int _publisherId;
		
		private EntityRef<Alarm> _Alarm;
		
		private EntityRef<AlarmPublisher> _AlarmPublisher;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnalarmIdChanging(int value);
    partial void OnalarmIdChanged();
    partial void OnpublisherIdChanging(int value);
    partial void OnpublisherIdChanged();
    #endregion
		
		public PublishedAlarm()
		{
			this._Alarm = default(EntityRef<Alarm>);
			this._AlarmPublisher = default(EntityRef<AlarmPublisher>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_alarmId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int alarmId
		{
			get
			{
				return this._alarmId;
			}
			set
			{
				if ((this._alarmId != value))
				{
					if (this._Alarm.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnalarmIdChanging(value);
					this.SendPropertyChanging();
					this._alarmId = value;
					this.SendPropertyChanged("alarmId");
					this.OnalarmIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_publisherId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int publisherId
		{
			get
			{
				return this._publisherId;
			}
			set
			{
				if ((this._publisherId != value))
				{
					if (this._AlarmPublisher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpublisherIdChanging(value);
					this.SendPropertyChanging();
					this._publisherId = value;
					this.SendPropertyChanged("publisherId");
					this.OnpublisherIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Alarm_PublishedAlarm", Storage="_Alarm", ThisKey="alarmId", OtherKey="id", IsForeignKey=true)]
		public Alarm Alarm
		{
			get
			{
				return this._Alarm.Entity;
			}
			set
			{
				Alarm previousValue = this._Alarm.Entity;
				if (((previousValue != value) 
							|| (this._Alarm.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Alarm.Entity = null;
						previousValue.PublishedAlarms.Remove(this);
					}
					this._Alarm.Entity = value;
					if ((value != null))
					{
						value.PublishedAlarms.Add(this);
						this._alarmId = value.id;
					}
					else
					{
						this._alarmId = default(int);
					}
					this.SendPropertyChanged("Alarm");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AlarmPublisher_PublishedAlarm", Storage="_AlarmPublisher", ThisKey="publisherId", OtherKey="id", IsForeignKey=true)]
		public AlarmPublisher AlarmPublisher
		{
			get
			{
				return this._AlarmPublisher.Entity;
			}
			set
			{
				AlarmPublisher previousValue = this._AlarmPublisher.Entity;
				if (((previousValue != value) 
							|| (this._AlarmPublisher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AlarmPublisher.Entity = null;
						previousValue.PublishedAlarms.Remove(this);
					}
					this._AlarmPublisher.Entity = value;
					if ((value != null))
					{
						value.PublishedAlarms.Add(this);
						this._publisherId = value.id;
					}
					else
					{
						this._publisherId = default(int);
					}
					this.SendPropertyChanged("AlarmPublisher");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
