//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HealthWebUI.ExtendedServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ExtendedServiceReference.IExtendedService")]
    public interface IExtendedService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExtendedService/createAlarmAttendance", ReplyAction="http://tempuri.org/IExtendedService/createAlarmAttendanceResponse")]
        void createAlarmAttendance(string alarmName, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExtendedService/createAlarmAttendance", ReplyAction="http://tempuri.org/IExtendedService/createAlarmAttendanceResponse")]
        System.Threading.Tasks.Task createAlarmAttendanceAsync(string alarmName, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExtendedService/deleteAlarmAttendance", ReplyAction="http://tempuri.org/IExtendedService/deleteAlarmAttendanceResponse")]
        void deleteAlarmAttendance(int alarmId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExtendedService/deleteAlarmAttendance", ReplyAction="http://tempuri.org/IExtendedService/deleteAlarmAttendanceResponse")]
        System.Threading.Tasks.Task deleteAlarmAttendanceAsync(int alarmId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExtendedService/getAllarmAttendants", ReplyAction="http://tempuri.org/IExtendedService/getAllarmAttendantsResponse")]
        HealthCareWCFServices.User[] getAllarmAttendants(int alarmId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExtendedService/getAllarmAttendants", ReplyAction="http://tempuri.org/IExtendedService/getAllarmAttendantsResponse")]
        System.Threading.Tasks.Task<HealthCareWCFServices.User[]> getAllarmAttendantsAsync(int alarmId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExtendedService/createAlarmCount", ReplyAction="http://tempuri.org/IExtendedService/createAlarmCountResponse")]
        void createAlarmCount(string alarmName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExtendedService/createAlarmCount", ReplyAction="http://tempuri.org/IExtendedService/createAlarmCountResponse")]
        System.Threading.Tasks.Task createAlarmCountAsync(string alarmName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExtendedService/getAlarmCount", ReplyAction="http://tempuri.org/IExtendedService/getAlarmCountResponse")]
        HealthCareWCFServices.ServiceAlarmCount getAlarmCount(int alarmId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExtendedService/getAlarmCount", ReplyAction="http://tempuri.org/IExtendedService/getAlarmCountResponse")]
        System.Threading.Tasks.Task<HealthCareWCFServices.ServiceAlarmCount> getAlarmCountAsync(int alarmId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExtendedService/getTaskUsers", ReplyAction="http://tempuri.org/IExtendedService/getTaskUsersResponse")]
        HealthCareWCFServices.User[] getTaskUsers(string taskName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExtendedService/getTaskUsers", ReplyAction="http://tempuri.org/IExtendedService/getTaskUsersResponse")]
        System.Threading.Tasks.Task<HealthCareWCFServices.User[]> getTaskUsersAsync(string taskName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExtendedService/getUserTasks", ReplyAction="http://tempuri.org/IExtendedService/getUserTasksResponse")]
        HealthCareWCFServices.Task[] getUserTasks(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExtendedService/getUserTasks", ReplyAction="http://tempuri.org/IExtendedService/getUserTasksResponse")]
        System.Threading.Tasks.Task<HealthCareWCFServices.Task[]> getUserTasksAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExtendedService/createAssignedTask", ReplyAction="http://tempuri.org/IExtendedService/createAssignedTaskResponse")]
        void createAssignedTask(string taskName, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExtendedService/createAssignedTask", ReplyAction="http://tempuri.org/IExtendedService/createAssignedTaskResponse")]
        System.Threading.Tasks.Task createAssignedTaskAsync(string taskName, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExtendedService/deleteAssignedTask", ReplyAction="http://tempuri.org/IExtendedService/deleteAssignedTaskResponse")]
        void deleteAssignedTask(int taskId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExtendedService/deleteAssignedTask", ReplyAction="http://tempuri.org/IExtendedService/deleteAssignedTaskResponse")]
        System.Threading.Tasks.Task deleteAssignedTaskAsync(int taskId, int userId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IExtendedServiceChannel : HealthWebUI.ExtendedServiceReference.IExtendedService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExtendedServiceClient : System.ServiceModel.ClientBase<HealthWebUI.ExtendedServiceReference.IExtendedService>, HealthWebUI.ExtendedServiceReference.IExtendedService {
        
        public ExtendedServiceClient() {
        }
        
        public ExtendedServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ExtendedServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ExtendedServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ExtendedServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void createAlarmAttendance(string alarmName, string userName) {
            base.Channel.createAlarmAttendance(alarmName, userName);
        }
        
        public System.Threading.Tasks.Task createAlarmAttendanceAsync(string alarmName, string userName) {
            return base.Channel.createAlarmAttendanceAsync(alarmName, userName);
        }
        
        public void deleteAlarmAttendance(int alarmId, int userId) {
            base.Channel.deleteAlarmAttendance(alarmId, userId);
        }
        
        public System.Threading.Tasks.Task deleteAlarmAttendanceAsync(int alarmId, int userId) {
            return base.Channel.deleteAlarmAttendanceAsync(alarmId, userId);
        }
        
        public HealthCareWCFServices.User[] getAllarmAttendants(int alarmId) {
            return base.Channel.getAllarmAttendants(alarmId);
        }
        
        public System.Threading.Tasks.Task<HealthCareWCFServices.User[]> getAllarmAttendantsAsync(int alarmId) {
            return base.Channel.getAllarmAttendantsAsync(alarmId);
        }
        
        public void createAlarmCount(string alarmName) {
            base.Channel.createAlarmCount(alarmName);
        }
        
        public System.Threading.Tasks.Task createAlarmCountAsync(string alarmName) {
            return base.Channel.createAlarmCountAsync(alarmName);
        }
        
        public HealthCareWCFServices.ServiceAlarmCount getAlarmCount(int alarmId) {
            return base.Channel.getAlarmCount(alarmId);
        }
        
        public System.Threading.Tasks.Task<HealthCareWCFServices.ServiceAlarmCount> getAlarmCountAsync(int alarmId) {
            return base.Channel.getAlarmCountAsync(alarmId);
        }
        
        public HealthCareWCFServices.User[] getTaskUsers(string taskName) {
            return base.Channel.getTaskUsers(taskName);
        }
        
        public System.Threading.Tasks.Task<HealthCareWCFServices.User[]> getTaskUsersAsync(string taskName) {
            return base.Channel.getTaskUsersAsync(taskName);
        }
        
        public HealthCareWCFServices.Task[] getUserTasks(string username) {
            return base.Channel.getUserTasks(username);
        }
        
        public System.Threading.Tasks.Task<HealthCareWCFServices.Task[]> getUserTasksAsync(string username) {
            return base.Channel.getUserTasksAsync(username);
        }
        
        public void createAssignedTask(string taskName, string username) {
            base.Channel.createAssignedTask(taskName, username);
        }
        
        public System.Threading.Tasks.Task createAssignedTaskAsync(string taskName, string username) {
            return base.Channel.createAssignedTaskAsync(taskName, username);
        }
        
        public void deleteAssignedTask(int taskId, int userId) {
            base.Channel.deleteAssignedTask(taskId, userId);
        }
        
        public System.Threading.Tasks.Task deleteAssignedTaskAsync(int taskId, int userId) {
            return base.Channel.deleteAssignedTaskAsync(taskId, userId);
        }
    }
}
